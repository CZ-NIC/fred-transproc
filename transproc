#!/usr/bin/env python
#
# vim: set ts=4 sw=4:

import sys, getopt, imaplib, commands, tempfile, os, os.path
from email.FeedParser import FeedParser

verbose = False

def usage():
	print '%s [-c config] [-H imaphost] [-p imappassword] [-u imapuser] [-v]' % sys.argv[0]

def debug(msg):
	global verbose
	if verbose:
		sys.stderr.write(msg + '\n')

def error(msg):
	sys.stderr.write(msg + '\n')

class Processor(object):
	'''Class representing a processor of transcript.'''
	def __init__(self, name):
		self.name     = name
		self.fromhead = None
		self.script   = None


def main():
	global verbose
	# parse command line options
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'c:h:p:u:v', [])
	except getopt.GetoptError:
		usage()
		sys.exit(2)
	# default values
	imaphost = None
	imappass = None
	imapuser = None
	nshost   = None
	# parameter values
	for o,a in opts:
		if o == '-c':
			configfile = a
		elif o == '-h':
			imaphost = a
		elif o == '-p':
			imappass = a
		elif o == '-u':
			imapuser = a
		elif o == '-v':
			verbose = True
		else:
			usage()
			sys.exit(2)
	# read configuration file
	config = ConfigParser.ConfigParser(
			{imaphost:'localhost',
			 imappass:'',
			 imapuser:'transcripts',
			 nshost:'localhost',
			 fm_cmd:'filemanager_client',
			 procdir:'/usr/libexec/transproc'})
	config.read(configfile)
	# set not zone specific configuration values
	if not imaphost:
		imaphost = config.get('general', 'imaphost')
	if not imappass:
		imappass = config.get('general', 'imappass')
	if not imapuser:
		imapuser = config.get('general', 'imapuser')
	if not nshost:
		nshost = config.get('general', 'nshost')
	fm_cmd = config.get('general', 'fm_cmd')
	procdir = config.get('general', 'procdir')
	# iterate over other sections in config
	processors = []
	for section in config.sections():
		if section == 'general':
			continue
		proc = Processor(section)
		if not config.has_option(section, 'fromhead'):
			error('fromhead directive must be set in %s section' % section)
			sys.exit(2)
		proc.fromhead = config.get(section, 'fromhead')
		if not config.has_option(section, 'processor'):
			error('processor directive must be set in %s section' % section)
			sys.exit(2)
		proc.script = config.get(section, 'processor')
		processors.append(proc)
	# end of configuration
	# action begins
	server = imaplib.IMAP4(imaphost)
	debug('Connected to %s' % imaphost)
	server.login(imapuser, imappass)
	debug('Logged in as %s' % imapuser)
	server.select()
	error_seen = False
	for proc in processors:
		# get unseen messages from a bank
		r, data = server.search(None, '((UNSEEN) (FROM %s))' % proc.fromhead)
		msgids = data[0].split(' ')
		if not msgids[0]:
			debug('No new messages from %s in mailbox' % proc.name)
			continue
		messages = {}
		for msgid in msgids:
			(r, data) = server.fetch(msgid, '(RFC822)')
			messages[msgid] = data[0][1]
		debug('%d new messages from %s' % (len(messages), proc.name))
		# since now, whatever bad happens, we must restore unseen flag
		# on downloaded messages, which were not processed
		for msgid in messages:
			debug('%s: processing message %d' % (proc.name, msgid))
			# create temp file for message overhandling
			fd = tempfile.NamedTemporaryFile()
			fd.write(messages[msgid])
			fd.flush()
			cmd = '%s %s' % (os.path.join(procdir, proc.script), fd.name)
			fd.close()
			(status, output) = commands.getstatusoutput(proc.script)
			status = os.WEXITSTATUS(status)
			if status == 0:
				debug('%s: message %d processed' % (proc.name, msgid))
			elif status == 1:
				# restore the UNSEEN flag - something in script failed
				# we will reprocess the email nexttime
				server.store(msgid, '-FLAGS', '\\Seen')
				error('%s: processing of message %d failed' % (proc.name,msgid))
				error_seen = True
			elif status == 2:
				# don't restore the UNSEEN flag - we want to avoid repetitive
				# processing nexttime
				debug('%s: message %d rejected' % (proc.name, msgid))
	server.close()
	server.logout()
	debug('Logged out')
	if error_seen:
		sys.exit(1)


if __name__ == '__main__':
	main()

